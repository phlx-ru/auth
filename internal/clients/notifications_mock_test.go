// Code generated by MockGen. DO NOT EDIT.
// Source: ./notifications.go

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotifications is a mock of Notifications interface.
type MockNotifications struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsMockRecorder
}

// MockNotificationsMockRecorder is the mock recorder for MockNotifications.
type MockNotificationsMockRecorder struct {
	mock *MockNotifications
}

// NewMockNotifications creates a new mock instance.
func NewMockNotifications(ctrl *gomock.Controller) *MockNotifications {
	mock := &MockNotifications{ctrl: ctrl}
	mock.recorder = &MockNotificationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifications) EXPECT() *MockNotificationsMockRecorder {
	return m.recorder
}

// EnqueueMailWithHTML mocks base method.
func (m *MockNotifications) EnqueueMailWithHTML(ctx context.Context, to, subject, body string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueMailWithHTML", ctx, to, subject, body)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueMailWithHTML indicates an expected call of EnqueueMailWithHTML.
func (mr *MockNotificationsMockRecorder) EnqueueMailWithHTML(ctx, to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueMailWithHTML", reflect.TypeOf((*MockNotifications)(nil).EnqueueMailWithHTML), ctx, to, subject, body)
}

// EnqueueSMS mocks base method.
func (m *MockNotifications) EnqueueSMS(ctx context.Context, phone, text string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueSMS", ctx, phone, text)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueSMS indicates an expected call of EnqueueSMS.
func (mr *MockNotificationsMockRecorder) EnqueueSMS(ctx, phone, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueSMS", reflect.TypeOf((*MockNotifications)(nil).EnqueueSMS), ctx, phone, text)
}

// EnqueueTelegramWithMarkdown mocks base method.
func (m *MockNotifications) EnqueueTelegramWithMarkdown(ctx context.Context, chatID, text string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueTelegramWithMarkdown", ctx, chatID, text)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueTelegramWithMarkdown indicates an expected call of EnqueueTelegramWithMarkdown.
func (mr *MockNotificationsMockRecorder) EnqueueTelegramWithMarkdown(ctx, chatID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueTelegramWithMarkdown", reflect.TypeOf((*MockNotifications)(nil).EnqueueTelegramWithMarkdown), ctx, chatID, text)
}
