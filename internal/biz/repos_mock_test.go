// Code generated by MockGen. DO NOT EDIT.
// Source: ./repos.go

// Package biz is a generated GoMock package.
package biz

import (
	ent "auth/ent"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepo is a mock of SessionRepo interface.
type MockSessionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepoMockRecorder
}

// MockSessionRepoMockRecorder is the mock recorder for MockSessionRepo.
type MockSessionRepoMockRecorder struct {
	mock *MockSessionRepo
}

// NewMockSessionRepo creates a new mock instance.
func NewMockSessionRepo(ctrl *gomock.Controller) *MockSessionRepo {
	mock := &MockSessionRepo{ctrl: ctrl}
	mock.recorder = &MockSessionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepo) EXPECT() *MockSessionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionRepo) Create(arg0 context.Context, arg1 *ent.Session) (*ent.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*ent.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionRepo)(nil).Create), arg0, arg1)
}

// FindByToken mocks base method.
func (m *MockSessionRepo) FindByToken(ctx context.Context, token string) (*ent.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", ctx, token)
	ret0, _ := ret[0].(*ent.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockSessionRepoMockRecorder) FindByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockSessionRepo)(nil).FindByToken), ctx, token)
}

// MockCodeRepo is a mock of CodeRepo interface.
type MockCodeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCodeRepoMockRecorder
}

// MockCodeRepoMockRecorder is the mock recorder for MockCodeRepo.
type MockCodeRepoMockRecorder struct {
	mock *MockCodeRepo
}

// NewMockCodeRepo creates a new mock instance.
func NewMockCodeRepo(ctrl *gomock.Controller) *MockCodeRepo {
	mock := &MockCodeRepo{ctrl: ctrl}
	mock.recorder = &MockCodeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeRepo) EXPECT() *MockCodeRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCodeRepo) Create(arg0 context.Context, arg1 *ent.Code) (*ent.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*ent.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCodeRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCodeRepo)(nil).Create), arg0, arg1)
}

// FindForUser mocks base method.
func (m *MockCodeRepo) FindForUser(ctx context.Context, userID int) (*ent.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindForUser", ctx, userID)
	ret0, _ := ret[0].(*ent.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindForUser indicates an expected call of FindForUser.
func (mr *MockCodeRepoMockRecorder) FindForUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindForUser", reflect.TypeOf((*MockCodeRepo)(nil).FindForUser), ctx, userID)
}

// MockHistoryRepo is a mock of HistoryRepo interface.
type MockHistoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryRepoMockRecorder
}

// MockHistoryRepoMockRecorder is the mock recorder for MockHistoryRepo.
type MockHistoryRepoMockRecorder struct {
	mock *MockHistoryRepo
}

// NewMockHistoryRepo creates a new mock instance.
func NewMockHistoryRepo(ctrl *gomock.Controller) *MockHistoryRepo {
	mock := &MockHistoryRepo{ctrl: ctrl}
	mock.recorder = &MockHistoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryRepo) EXPECT() *MockHistoryRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHistoryRepo) Create(arg0 context.Context, arg1 *ent.History) (*ent.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*ent.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockHistoryRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHistoryRepo)(nil).Create), arg0, arg1)
}

// FindLastUserEvents mocks base method.
func (m *MockHistoryRepo) FindLastUserEvents(ctx context.Context, userID int, types []string, interval time.Duration) ([]*ent.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastUserEvents", ctx, userID, types, interval)
	ret0, _ := ret[0].([]*ent.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastUserEvents indicates an expected call of FindLastUserEvents.
func (mr *MockHistoryRepoMockRecorder) FindLastUserEvents(ctx, userID, types, interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastUserEvents", reflect.TypeOf((*MockHistoryRepo)(nil).FindLastUserEvents), ctx, userID, types, interval)
}

// FindUserEvents mocks base method.
func (m *MockHistoryRepo) FindUserEvents(ctx context.Context, userID, limit, offset int) ([]*ent.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserEvents", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]*ent.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserEvents indicates an expected call of FindUserEvents.
func (mr *MockHistoryRepoMockRecorder) FindUserEvents(ctx, userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserEvents", reflect.TypeOf((*MockHistoryRepo)(nil).FindUserEvents), ctx, userID, limit, offset)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepo) Create(arg0 context.Context, arg1 *ent.User) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepo)(nil).Create), arg0, arg1)
}

// FindByEmail mocks base method.
func (m *MockUserRepo) FindByEmail(ctx context.Context, email string) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepoMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepo)(nil).FindByEmail), ctx, email)
}

// FindByID mocks base method.
func (m *MockUserRepo) FindByID(ctx context.Context, id int) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserRepoMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserRepo)(nil).FindByID), ctx, id)
}

// FindByPhone mocks base method.
func (m *MockUserRepo) FindByPhone(ctx context.Context, phone string) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", ctx, phone)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockUserRepoMockRecorder) FindByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockUserRepo)(nil).FindByPhone), ctx, phone)
}

// Update mocks base method.
func (m *MockUserRepo) Update(arg0 context.Context, arg1 *ent.User) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepo)(nil).Update), arg0, arg1)
}
